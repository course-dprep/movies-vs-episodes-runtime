# this script will be used to populate the \data directory with all necessary raw data files.
# setup packages
library(tidyverse)
# retrieve dataset for Movie and TV Episode Duration and Release Year
title_url <- "https://datasets.imdbws.com/title.basics.tsv.gz"
title_basics_raw <- read_tsv(title_url, na = c("\\N", ""))
# retrieve dataset for rating
rating_url <- "https://datasets.imdbws.com/title.ratings.tsv.gz"
ratings_raw <- read_tsv(rating_url, na = c("\\N", ""))
View(title_basics_raw)
rating_url <- "https://datasets.imdbws.com/title.ratings.tsv.gz"
ratings_raw <- read_tsv(rating_url, na = c("\\N", ""))
ratings_raw <- read_tsv(rating_url, na = c("\\N", ""))
View(ratings_raw)
knitr::opts_chunk$set(echo = TRUE)
# setup packages
library(tidyverse)
# load raw data
source("download-data.R")
# filter out movies and tv episodes
filtered_movies_TVepisodes <- title_basics_raw %>% filter(titleType %in% c("movie", "tvepisode"))
# merge datasets: filtered_movies_TVepisodes and ratings_fixed
merged_data <- filtered_movies_TVepisodes %>% left_join(ratings_raw, by = "tconst")
# create dummy variable: 0=movie, 1=tvepisode
merged_data <- merged_data %>% mutate(is_tvepisode = ifelse(titleType == "tvepisode", 1, 0))
View(merged_data)
test_merged_data <- merged_data[!is.na(merged_data$runtimeMinutes), ]
View(test_merged_data)
View(test_merged_data)
View(merged_data)
View(merged_data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
title_url <- "https://datasets.imdbws.com/title.basics.tsv.gz"
rating_url <- "https://datasets.imdbws.com/title.ratings.tsv.gz"
title_basics_raw <- read_tsv(title_url, na = c("\\N", ""), show_col_types = FALSE)
ratings_raw <- read_tsv(rating_url, na = c("\\N", ""), show_col_types = FALSE)
filtered_movies_TVepisodes <- title_basics_raw %>%
filter(titleType %in% c("movie", "tvEpisode"))
View(filtered_movies_TVepisodes)
merged_data <- filtered_movies_TVepisodes %>%
left_join(ratings_raw, by = "tconst")
cat("Number of unmatched rows:", nrow(filtered_movies_TVepisodes)-nrow(merged_data), "\n")
merged_data <- merged_data %>%
mutate(is_tvepisode = ifelse(titleType == "tvEpisode", 1,0))
library(data.table)
analysis_data <- as.data.table(merged_data)
analysis_data[, c("originalTitle", "titleType", "isAdult", "endYear", "genres", "numVotes") := NULL]
analysis_data <- analysis_data[!is.na(runtimeMinutes) & !is.na(averageRating) & !is.na(startYear)] %>% distinct(tconst, .keep_all = TRUE)
View(analysis_data)
library(ggplot2)
ggplot(analysis_data, aes(y = runtimeMinutes)) +
geom_boxplot(fill = "blue", outlier.color = "red", outlier.shape = 16) +
labs(
y = "Runtime (minutes)",
title = "Boxplot of Movie and TV Episode Runtime with Outliers Highlighted"
) +
theme_minimal()
# Function to remove outliers by group
analysis_data_clean <- analysis_data %>%
group_by(is_tvepisode) %>%
filter({
Q1 <- quantile(runtimeMinutes, 0.25)
Q3 <- quantile(runtimeMinutes, 0.75)
IQR_val <- Q3 - Q1
runtimeMinutes >= (Q1 - 1.5 * IQR_val) & runtimeMinutes <= (Q3 + 1.5 * IQR_val)
}) %>%
ungroup()
ggplot(analysis_data_clean, aes(y = runtimeMinutes)) +
geom_boxplot(fill = "green") +
labs(
y = "Runtime (minutes)",
title = "Boxplot of Movie and TV Episode Runtime (Outliers Removed)"
) +
theme_minimal()
dim(analysis_data_clean)
analysis_data_clean %>%
group_by(is_tvepisode) %>%
group_split() %>%
lapply(function(df) {
summary(df$runtimeMinutes)
})
summary(analysis_data_clean$averageRating)
# Plot after removing outliers per group
ggplot(analysis_data_clean, aes(x = factor(is_tvepisode, labels = c("Movie", "TV Episode")),
y = runtimeMinutes,
fill = factor(is_tvepisode, labels = c("Movie", "TV Episode")))) +
geom_boxplot(outlier.color = "red", outlier.shape = 16) +
labs(
x = "Type",
y = "Runtime (minutes)",
fill = "Type",
title = "Runtime Distribution by Type (Outliers Removed)"
) +
theme_minimal()
table(analysis_data_clean$is_tvepisode)
# Analysing the data
analysis_data_clean %>%
filter(is_tvepisode == 1) %>%
ggplot(aes(x = runtimeMinutes)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Distribution of Runtime for TV Episodes",
x = "Runtime (minutes)",
y = "Count")
analysis_data_clean %>%
filter(runtimeMinutes < 15, is_tvepisode==1) %>%
summarise(count = n())
# Removing TV episodes that are shorter than 15 minutes or longer than 65 minutes
analysis_data_clean <- analysis_data_clean %>%
filter(is_tvepisode != 1 | (runtimeMinutes >= 15 & runtimeMinutes <= 65))
